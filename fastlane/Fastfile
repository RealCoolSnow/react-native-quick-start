before_all do
  # for slack plugin
  ENV['SLACK_URL'] = 'SLACK_URL_HERE' # format: 'https://hooks.slack.com/services/alphanumeric/alphanumeric/alphanumeric'
  # for slack_upload plugin
  ENV['SLACK_API_TOKEN'] = 'SLACK_TOKEN_HERE' # format: 'xoxb-numbers-numbers-alphanumeric'
  ENV['TG_BOT_TOKEN'] = 'TELEGRAM_BOT_TOKEN_HERE' # format: 'numbers:alphanumeric'
  ENV['TG_CHAT_ID'] = 'TELEGRAM_CHAT_ID' # format: '-someRandomNumbers'
end
  
package = load_json(json_path: "./package.json")
android_app_project_dir = './android/app'
android_apk_dir = "#{android_app_project_dir}/build/outputs/apk/debug/app-debug.apk"

desc 'iOS: Increment build number and set the version to package.json version.'
lane :increment_version_ios do
  increment_build_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj'
  )
  increment_version_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj',
    version_number: package['version']
  )
end

desc 'iOS: get build and version numbers'
# platform :ios do
lane :get_version_ios do
  version_number = get_version_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj'
  )
  build_number = get_build_number(
    xcodeproj: './ios/' + package['name'] + '.xcodeproj'
  )
  version = { app_version: version_number, build_number: build_number }
  version
end
# end

desc 'Android: Increment versionCode and set versionName to package.json version.'
lane :increment_version_android do
  increment_version_code(
    app_project_dir: android_app_project_dir,
  )
  increment_version_name(
    app_project_dir: android_app_project_dir,
    version_name: package['version'],
  )
end

desc 'Android: get version code and name'
# platform :android do
lane :get_version_android do
  version_name = get_version_name(
    app_project_dir: android_app_project_dir
  )
  version_code = get_version_code(
    app_project_dir: android_app_project_dir
  )
  version = { app_version: version_name, build_number: version_code }
  version
end
# end

desc 'Bump build numbers, and set the version to match the pacakage.json version.'
lane :bump_version do
  increment_version_android
  increment_version_ios
end

desc 'Android: QA Build'
platform :android do
    lane :build_qa do
        gradle(task: 'clean', project_dir: './android/')
        gradle(tasks: ['bundleDebug', 'assembleDebug'], project_dir: './android/')
    end 
end

def confirm_input(actionLabel, label = '')
  if UI.interactive?
    text = UI.input(actionLabel)
    if text.empty? || text.nil?
      UI.error("Ooops, #{label} is blank")
      return label == 'Message' ? '' : "...dev forgot to add #{label}"
    else
      text
    end
  else
    return label == 'Message' ? '' : "...dev forgot to add #{label}"
  end
end

desc 'Slack: notify team with new build'
lane :notify_slack do
  message = confirm_input('Write slack message:', 'Message')
  changelog = confirm_input('Write changelog:', 'Changelog')
  ticket_link = confirm_input('Paste ticket link:', 'Ticket Link')
  version = get_version_android
  # for tagging as the bot uploader, go to slack > profile of user > more > copy member id, MEMBER_ID_HERE format: <@USomething>
  slack(
    pretext: message.empty? ? 'Hi MEMBER_ID_HERE, we have a new build' : message,
    message: 'Sample Fastlane integration in RN',
    channel: '#fastlane', # some slack channel name e.g. fastlane
    success: true,
    default_payloads: [],
    attachment_properties: {
      fields: [
        {
          title: 'Platform',
          value: 'Android',
        },
        {
          title: "App Version",
          value: version[:app_version],
        }, {
          title: "Build Number",
          value: version[:build_number],
        },
        {
          title: 'Changelog',
          value: changelog,
        },
        {
          title: 'Ticket',
          value: ticket_link,
        },
      ]
    }
  )
end

desc 'Slack: Upload Android APK'
lane :upload_to_slack do
  slack_upload(
    title: '',
    channel: '#fastlane', # some slack channel name e.g. fastlane
    file_path: android_apk_dir
  )
end

desc 'Slack: Upload and notify Android APK'
lane :notify_upload_to_slack do
  notify_slack
  upload_to_slack
end

desc 'Telegram: notify team with new build'
lane :notify_telegram do
  message = confirm_input('Write telegram message:', 'Message')
  changelog = confirm_input('Write changelog:', 'Changelog')
  ticket_link = confirm_input('Paste ticket link:', 'Ticket Link')
  version = get_version_android

  telegram(
    token: ENV['TG_BOT_TOKEN'],
    chat_id: ENV['TG_CHAT_ID'],
    text: # change @username_to_tag
    "#{message.empty? ? 'Hi @username_to_tag, we have a new build' : message}
    App Name: Sample Fastlane integration in RN
    Platform: Android
    App Version: #{version[:app_version]}
    Build Number: #{version[:build_number]}
    Change log: #{changelog}
    Ticket: #{ticket_link}"
  )
end

desc 'Telegram: Notify and upload Android APK'
lane :notify_upload_to_telegram do
  message = confirm_input('Write telegram message:', 'Message')
  changelog = confirm_input('Write changelog:', 'Changelog')
  ticket_link = confirm_input('Paste ticket link:', 'Ticket Link')
  version = get_version_android
  # change @username_to_tag
  text = "#{message.empty? ? 'Hi @username_to_tag, we have a new build' : message}\nApp Name\: Sample Fastlane integration in RN\nPlatform\: Android\nApp Version\: #{version[:app_version]}\nBuild Number\: #{version[:build_number]}\nChange log\: #{changelog}\nTicket\: #{ticket_link}"
  encoded_text = URI.encode_www_form_component(text)
  url = "https://api.telegram.org/bot#{ENV['TG_BOT_TOKEN']}/sendDocument?chat_id=#{ENV['TG_CHAT_ID']}&caption=#{encoded_text}"
  Dir.chdir('../') do
    sh "curl -F \"document=@#{android_apk_dir}\" \"#{url}\""
  end
end

### WIP: Interactive Options
desc 'Choose platform'
lane :choose_platform do |options|
  target_platform = UI.select('Which platform?', [
    'iOS',
    'Android',
    'Both',
  ])

  if target_platform.match(/iOS/)
    options[:ios_action]
  elsif target_platform.match(/Android/)
    options[:android_action]
  else
    options[:ios_action]
    options[:android_action]
  end
end

desc 'Choose task from options'
lane :choose_task do
  target_task_label = UI.select('What do you want to do?', [
    'Build locally and upload to chat',
    'Ship Beta and Release',
    'Increment build numbers and versions',
    'Cancel? Not sure what I\'m doing, tbh ðŸ¤·'
  ])

  if target_task_label.match(/Build/)
    UI.important('Under construction ðŸš§')
  elsif target_task_label.match(/Ship/)
    UI.important('Under construction ðŸš§')
  elsif target_task_label.match(/Increment/)
    # Dir.chdir('..') d
    # sh 'npm run bump-patch'
    choose_platform(android_action: increment_version_android, ios_action: increment_version_ios)
    # end
  else
    UI.error('Cancelled! ðŸ˜†')
  end
end
  